#! /usr/bin/ruby

require "./gcd.rb"

class Fraccion                    	#METODOS
        attr_reader :num, :denom        	
					
        def initialize(n,d)
	  @num,@denom = n,d         #Inicializamos
        end
        
	
        def to_s
	  "#{num}/#{denom}" #To_String
        end
    
	
	def +(other)										#SUMA
	  aux = mcm(@denom, other.denom)							#MCM denominadores
	  temp = Fraccion.new(((aux/@denom)*@num)+((aux/other.denom)*other.num),aux)		#Sumamos
	  simplificar(temp)									#Simplificamos
        end

	
        def -(other)										#RESTA
	  aux = mcm(@denom, other.denom)
	  temp = Fraccion.new(((aux/@denom)*@num)-((aux/other.denom)*other.num),aux) #resta de los objetos
	  simplificar(temp)                                  #simplificación del resultado
        end

	
        def *(other)										#MULTIPLICACION
	  temp=Fraccion.new(@num*other.num, @denom*other.denom) 
	  simplificar(temp)                                                 
        end 
        
	
        def /(other)										#DIVISION
	  temp = Fraccion.new(@num*other.denom, @denom*other.num)
	  simplificar(temp)
        end
        
	
	def mcm(n, m)										#MCM
	   aux=gcd(n,m)
	  (n/aux)*m 
	end
	
	
       
        def simplificar(other)									#SIMPLIFICADOR RACIONAL
	  aux = gcd(other.num, other.denom)							#MCD entre num y denom
	  Fraccion.new(other.num/aux, other.denom/aux) 
	end
	
end



#Creación de objetos y salida por pantalla para ver el funcionamiento
frac1 = Fraccion.new(8,13)
frac2 = Fraccion.new(21,9)

puts "Suma: #{frac1+frac2}"

puts "Resta: #{frac1-frac2}"

puts "Producto: #{frac1*frac2}"

puts "Division: #{frac1/frac2}"

